<?php

namespace zxf\laravel\Modules\Providers;

use App\Models\User;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\URL;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\ServiceProvider;

use Modules\Apidoc\Entities\ApidocApp;
use Modules\Core\Modules\Activators\FileActivator;
use Modules\Core\Observers\ApidocAppObserver;
use Modules\Core\Observers\UserObserver;

class ModulesAppServiceProvider extends ServiceProvider
{

    protected static $instance;

    /**
     * 初始化
     * @access public
     */
    public static function instance($app)
    {
        if (is_null(self::$instance)) {
            self::$instance = new static($app);
        }
        return self::$instance;
    }

    public function register()
    {
        // 注册路由
        $this->app->register(CustomRouteServiceProvider::class);

        $this->app->register(ConsoleServiceProvider::class);
        // $this->app->register(ContractsServiceProvider::class);

        // 注册modules 模块服务
        if (app()->runningInConsole()) {
            $this->registerModulesServices();
        }
    }

    public function boot()
    {
        // 强制跳转 https
        if (config('app.env') !== 'local') {
            URL::forceScheme('https');
        }

        // 加载观察者
        $this->bootObservers();

        if ($this->app->runningInConsole()) {
            // 数据库迁移默认字符串长度
            Schema::defaultStringLength(191);
        }

        // 设置数据分页模板
        $this->setPaginationView();

        // 加载模块boot
        $this->mapModuleBoot();

    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }

    protected function bootObservers()
    {
        // 用户
        User::observe(UserObserver::class);
        ApidocApp::observe(ApidocAppObserver::class);
    }

    // 设置数据分页模板
    protected function setPaginationView()
    {
        // php artisan vendor:publish --tag=laravel-pagination
        Paginator::defaultView('vendor.pagination.default');
        Paginator::defaultSimpleView('vendor.pagination.simple-default');
    }

    protected function mapModuleBoot()
    {
        $modules = array_slice(scandir(base_path(config('modules.namespace','Modules'))), 2);
        foreach ($modules as $module) {
            $moduleLower = strtolower($module);
            if (is_dir(base_path(config('modules.namespace','Modules').'/' . $module))) {
                $this->registerTranslations($module, $moduleLower);
                $this->registerConfig($module, $moduleLower);
                $this->registerViews($module, $moduleLower);
                $this->loadMigrationsFrom(module_path($module, 'Database/Migrations'));
                $this->loadFactoriesFrom(module_path($module, 'Database/factories'));
            }
        }
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations($module, $moduleLower)
    {
        $langPath = resource_path('lang/modules/' . $moduleLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $moduleLower);
        } else {
            $this->loadTranslationsFrom(module_path($module, 'Resources/lang'), $moduleLower);
        }
    }

    /**
     * Register config.
     *
     * @return false|void
     */
    protected function registerConfig($module, $moduleLower)
    {
        if (!is_file(module_path($module, 'Config/config.php'))) {
            return false;
        }
        $this->publishes([
            module_path($module, 'Config/config.php') => config_path($moduleLower . '.php'),
        ], 'config');
        $this->mergeConfigFrom(
            module_path($module, 'Config/config.php'), $moduleLower
        );
    }

    /**
     * Register views.
     * 然后就可以使用 view('apidoc::test') 去访问Apidoc/Resources/views里面的视图文件了
     *
     * @return void
     */
    public function registerViews($module, $moduleLower)
    {
        $viewPath = resource_path('views/modules/' . $moduleLower);

        $sourcePath = module_path($module, 'Resources/views');

        $this->loadViewsFrom(module_path($module, 'Resources/views'), $moduleLower);

        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', $moduleLower . '-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths($module, $moduleLower), [$sourcePath]), $moduleLower);
    }

    private function getPublishableViewPaths($module, $moduleLower): array
    {
        $paths = [];
        foreach (\Config::get('view.paths') as $path) {
            if (is_dir($path . '/modules/' . $moduleLower)) {
                $paths[] = $path . '/modules/' . $moduleLower;
            }
        }
        return $paths;
    }

    /**
     * {@inheritdoc}
     */
    protected function registerModulesServices()
    {
        $this->app->singleton(\Modules\Core\Modules\Contracts\RepositoryInterface::class, function ($app) {
            return new \Modules\Core\Modules\Laravel\LaravelFileRepository($app, base_path(config('modules.namespace','Modules')));
        });
        $this->app->singleton(\Modules\Core\Modules\Contracts\ActivatorInterface::class, function ($app) {
            return new FileActivator($app);
        });
        // $this->laravel['modules']
        $this->app->alias(\Modules\Core\Modules\Contracts\RepositoryInterface::class, 'modules');
    }
}
